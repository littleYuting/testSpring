<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--2019.11.13 Spring Aop 在切入业务之前可以执行别的任务-->

    <!--配置spring的ioc-，把service对象配置进来-->
    <bean id="accountService2" class="com.cyt.service.impl.AccountServiceImpl21_aop"></bean>

    <!--spring中基于xml的aop配置
        1. 把通知bean交给spring来管理
        2. 使用 aop：config 标签表明开始AOP的配置
        3. 使用 aop：aspect 标签表明配置切面
            id 属性：是给切面提供一个唯一标识
            ref 属性：是指定通知类bean 的id
        4， 在aop：aspect标签的内部使用对应标签来配置通知的类型
            当前事例是让printLog的方法在切入点方法执行之前执行，所以是前置通知
            aop:before：表示配置的前置通知，
                        method属性用于指定Logger类中哪个方法是前置通知
                        pointCut 属性：用于指定切入点表达式，该表达式的含义是指对业务层的哪些方法增强
                        切入点表达式的写法：
                            关键字：execution（表达式）
                            表达式：访问修饰符 返回值 包名.包名.包名...类名.方法名（参数列表）
                            标准表达式： eg. public void com.cyt.service.impl.AccountServiceImpl21_aop.saveAccount()
                                (1)访问修饰符可省略： void com.cyt.service.impl.AccountServiceImpl21_aop.saveAccount()
                                (2)返回值可以使用通配符，表示任意返回值 * com.cyt.service.impl.AccountServiceImpl21_aop.saveAccount()
                                (3)包名可以使用通配符，表示任意包，但是有几级包，就需要写几个*.; eg.   * *.*.*.*.AccountServiceImpl21_aop.saveAccount()
                                (4)包名可以使用..表示当前包及其子包; eg. * *..AccountServiceImpl21_aop.saveAccount()
                                (5)类名和方法名都可以使用*来实现通配; eg. * *..*.*()【针对无参方法】
                                (6)可以直接写数据类型：a. 基本类型直接写名称inr; b.引用类型写包名.类名的方式 java.lang.String; eg. * *..*.*(int)
                            全通配写法：* *..*.*(..)
                            实际开发中切入点表达式的通常写法：
                                切到业务层实现类下的所有方法 * com.cyt.service.impl.*.*(..)
    -->

    <!--配置Logger类-->
    <bean id="logger" class="com.cyt.utils.Logger"></bean>

    <!--配置AOP-->
    <aop:config>
        <aop:pointcut id="pt1" expression="execution(* com.cyt.service.impl.*.*(..))"/>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知的类型，并且建立通知方法和切入点方法的关联-->
<!--            <aop:before method="printLog" pointcut="execution(public void com.cyt.service.impl.AccountServiceImpl21_aop.saveAccount())"></aop:before>-->
            <aop:before method="beforePrintLog" pointcut-ref="pt1"></aop:before>
            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"></aop:after-returning>
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>
<!--            <aop:after method="afterPrintLog" pointcut="execution(* com.cyt.service.impl.*.*(..))"></aop:after>-->
            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>
            <!--配置环绕通知-->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
            <!--配置通用的切入点表达式，id属性用于指定表达式的唯一标识，expression属性用于指定表达式内容
                此标签写在 aop:aspect 标签内部就只能被当前切面使用，其还可以写在 aop:aspect 外面，此时就变成了所有切面可用
            -->
<!--            <aop:pointcut id="pt1" expression="execution(* com.cyt.service.impl.*.*(..))"/>-->
        </aop:aspect>
    </aop:config>
</beans>